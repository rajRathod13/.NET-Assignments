Task 1:- What is model?
Answer :-A model is a class with . cs (for C#) as an extension having both properties and methods. Models are used to set or get the data.

Task 2:- Explain working of MVC Pattern.
Answer :-The Model-View-Controller (MVC) is an architectural pattern that separates an application into three main logical components: the model, the view, and the controller. 
	 Each of these components are built to handle specific development aspects of an application.
	 First Request generated by client. then request pass to controller, controller analyse the request and return the view,model decouple the backend logicfrom the fromt end and the data pass to the view.
         View will visualize the data provided by the model and responce given back to the client.

Task 3:- what is routing in MVC?
Answer :-Routing is the process of directing an HTTP request to a controller and the functionality of this processing is implemented in System.Web.Routing.
        System.Web.Routing is used by the MVC framework, but it's also used by ASP.NET Dynamic Data. The MVC framework leverages routing to direct a request to a controller.
        The Global.asax file is that part of your application, where you will define the route for your application.

Task 4:- What is a View?
Answer :-A view is an HTML template with embedded Razor markup. Razor markup is code that interacts with HTML markup to produce a webpage that's sent to the client. 
	 In ASP.NET Core MVC, views are .cshtml files that use the C# programming language in Razor markup.

Task 5:- What is the importance of Controller?
Answer :-A controller is responsible for controlling the way that a user interacts with an MVC application. A controller contains the flow control logic for an ASP.NET MVC application. 
         A controller determines what response to send back to a user when a user makes a browser request.

Task 6:- What is difference between MVC and Web Forms?
Answer :-MVC = MVC focuses on separation of concern, i.e., there is no fixed code behind page for every view.\
	       A view can be called from multiple action.
	 Web Forms = Web form based on functions and page behind code, i.e., there is code behind page for each view. 
		     You have to write code in that class related to this view only.

Task 7:- Explain what is Model?
Answer :-A model is a class with .cs (for C#) as an extension having both properties and methods. 
	 Models are used to set or get the data. If your application does not have data, then there is no need for a model. If your application has data, then you need a model.

Task 8:- How is Model different from DataLayer of WebForm?
Answer :-

Task 9:- Explain the concept of MVC Scaffolding?
Answer :-Scaffolding is a technique used by many MVC frameworks like ASP.NET MVC, Ruby on Rails, Cake PHP and Node.JS etc.,
	 to generate code for basic CRUD (create, read, update, and delete) operations against your database effectively. Further you can edit or customize this auto generated code according to your need.
	 Scaffolding consists of page templates, entity page templates, field page templates, and filter templates. These templates are called Scaffold templates and allow you to quickly build a functional data-driven Website.

Task 10:-What is RouteData and how to access its values?
Answer :-RouteData is a property of the base Controller class, so RouteData can be accessed in any controller. RouteData contains route information of a current request. You can get the controller, action or parameter information using RouteData

Task 12:-Differences between Razor and ASPX View Engine in MVC?
Answer :-View Engine renders the HTML to the browser. The view engine templates have a different syntax than the implementation. By default ASP.Net MVC supports ASPX and the Razor View Engine.
	 ASPX view - The syntax used for writing a view with the ASPX View Engine is the same as the syntax used in ASP.Net web forms. The file extensions are also the same as for ASP.NET web forms (like .aspx, .ascx, .master). This view engine is the default view engine for MVC 1.0 and MVC 2.0. 
	             Implementing the unit testing framework with the ASPX View Engine is very difficult. ASPX uses "<%= %>" or "<%: %>" to render server-side content.
	 Razor view -The Razor View Engine is an advanced view engine, available with MVC 3.0 and later versions. Razor uses the "@" character instead of "<% %>" as used by the ASPX View Engine. Razor does not require the code block to be closed, the Razor View Engine parsed itself and it is able to decide during run time that it is a presentation element (content) and that it is a code element. 
		     The Razor View Engine is compatible with a unit testing framework. The Razor template does not require the controller or webserver to host it, so views written in Razor are fully testable. The file extension of a Razor view is cshtml (for C#) and vbhtml (for VB.NET). By default all text from the @ expression is HTML encoded. Razor is not a new language. It is easy to learn. 
		     The main advantage of Razor, is that there is less transition between HTML and code because Razor provides an optimized syntax to generate HTML using a code focused templating approach.

Task 13:-Explain various return types of an action method.
Answer :-There are many return types of an action methods in .net core, which are as below,
	 1) Content Result - It will display string content on browser. We can also write html & XML content and return the path of directory at where current project files are stored.
	 2)View Result - It will pass the messaget to view via vieBag. Renders a specifed view to the response stream.
	 3)Redirect Result - RedirectResult is an ActionResult that returns a Found (302), Moved Permanently (301), Temporary Redirect (307), or Permanent Redirect (308) response with a Location header to the supplied URL. It will redirect us to the provided URL, it doesnâ€™t matter if the URL is relative or absolute.
	 4)RedirectToActionResult - RedirectToActionResult is an ActionResult that returns a Found (302), Moved Permanently (301), Temporary Redirect (307), or Permanent Redirect (308) response with a Location header. It targets a controller action, taking in action name, controller name, and route value.
	 5)RedirectToRouteResult - It will redirect by using endpoints in start up class.
	 6)FileResult - It will help to download file with different name.

Task 14:-What is Razor in MVC?
Answer :-Razor is a markup syntax that lets you embed server-based code into web pages using C# and VB.Net. It is not a programming language. It is a server side markup language. Razor has no ties to ASP.NET MVC because Razor is a general-purpose templating engine.

Task 15:-Explain custom middleware and where to add?
Answer :-Custom middleware are user defined middlewares which made for special scenarios and they are added in request pipeline in sartup class.

Task 17:-Why is Layout page important?
Answer :-These are used to share common visual elements in your pages and provide a consistent look and feel throughout your application. A layout page is added to the Views/Shared folder and is named (as a convention) _Layout. cshtml. 
	 There can be more than one layout pages in your application too.

Task 19:-What are sections?
Answer :-The ASP.NET Core allows you to create custom sections in the layout pages. The Custom Section expects a name of the section and whether the section is required. The RenderSection(string name, bool required:false) method defines the named section.